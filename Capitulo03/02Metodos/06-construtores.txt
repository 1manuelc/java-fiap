Um construtor de classe é responsável por replicar sua classe em objetos, inicializando os atributos
em memória ou até preenchendo-os, tornando viável a replicação do objeto em variável nova.

O construtor padrão somente inicializa os atributos em memória e os referencia pela variável,
mas não os preenche.

É possível customizar o construtor de objeto para incluir informações que desejar
através da criação de um método com o nome idêntico ao da classe sem tipo de retorno, e sem return no bloco.

Vale também ressaltar que a criação de um novo construtor não substitui o construtor padrão,
assim, induzirá um erro. Para sair do warning deve-se criar um outro método vazio com o mesmo
nome, para substituir o método padrão e utilizar o novo construtor por Sobrecarga de Método.

    Código com construtor padrão:

        Conta contaCorrente = new Conta();
        Conta contaPoupanca = new Conta();
        Conta contaInvestimento = new Conta();

        contaCorrente.numero = 11;
        contaCorrente.saldo = 20.5;
        contaCorrente.cliente.nome = "Leandro Jorge";
        contaCorrente.cliente.idade = 36;
        .   .   .

    Código com construtor customizado:

        Conta contaCorrente = new Conta(11, 20.5, "Leandro Jorge",(byte)36);
        Conta contaPoupanca = new Conta(51, 4500, "Fulano Silva", (byte)40);
        Conta contaInvestimento = new Conta(21, 500, "Ciclano Pereira", (byte)25);

    Neste segundo caso, o construtor customizado já explicita a inclusão dos dados dentro dos atributos
    do objeto logo na chamada do método construtor.

    Vale lembrar que podemos fazer um construtor chamar outro, logicamente os dois devem ser diferentes e
    um com mais parâmetros que o outro:
            public Account() {
            }

            public Account(int agency, int number) {
                this.agency = agency;
                this.number = number;
            }

            public Account(int agency, int number, double balance) {
                this(agency, number); // -> chama o construtor anterior com 2 parâmetros
                this.balance = balance;
            }