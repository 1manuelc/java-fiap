EXCEPTIONS
    
    Java uses Exceptions to catch and treat predictable errors in
    the code runtime, cataloging and taking attitudes.

    To catch exceptions, a flow in code is required:
        - Throw the exception
        - Capture it
        - Treats it adequately

    Using the block try{} catch{}, we can test and solve exceptions.

                example in: src/Exceptions.java

    In Java, exceptions are an object of type Exception, classified
    by:
        - Checked (required to solve)
        - Unchecked (not required to solve, generally generated by
                    runtime, relaunched if not treated).
        - Error (can't be solved, critical)





HIERARCHY
    
    In Java, the classes Error and Exception inherits the class
    Throwable, so now we can create our own exceptions.

    The Class Exception is inherited by Checked and Unchecked
    classes.

                examples in src/Unchecked.java

    Methods inherited by Throwable:
        - printStackTrace();    -> prints the error's line and column
        - getMessage();         -> return the message inside the exception

    Both methods ease our life speaking of recognizing exceptions.

    Ps:
        - The class Exception is the most generalist class, catches
        all errors.

        - If there isn't a specialized exception catch, the generalist
        will catch and treat all exceptions as programmed.

        - The "catches" need to be in order of specialization, id est,
        exceptions upper need to be more specific, and lower lines
        exceptions to be more generalist. All to don't interrupt the
        program runtime and treat the predictable problems.

        - Instead of using "System.out.println(...e.printStackTrace());
        we can use "System.err.println(...), cause' mainly the stack trace
        is stored in log files instead of the default data output "out".


FINALLY
    
    This block is always executed, neither have exceptions, treatments
    nor nothing.
