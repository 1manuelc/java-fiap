-------------------------------------------------------------------------------------------

    TYPE CAST

Occurs when we force an object to be of other type of reference in some moment
using explicit conversion.

This operation is possible because of the polymorphism of the objects.

    (ex1) Account cc = new CurrentAccount();
    CurrentAccount c1 = (CurrentAccount)cc;
                        |
                        -> We forced cc (Account type) to work as CurrentAccount type
                        reference in this particular moment with a cast.

                        This only works cause the variable cc carry an CurrentAccount
                        object in a different reference (the object still there, even
                        without his proper reference). If wasn't a subclass, would be
                        impossible.


    (ex2) Account account = new Account();
    CurrentAccount c2 = (CurrentAccount)account;
                        |
                        -> account variable don't carry an CurrentAccount object, so
                        it's impossible to "create" references to inner subclass features.

-------------------------------------------------------------------------------------------

    HOW TO VERIFY THE TYPE

Use the instruction "instanceof" in conditions.

    if(cc instanceof Account) {
        [code block]
    }

(example):
    public static void main(String[] args) {
        Account cc = new Account();             //-> isn't
        // Account cc = new CurrentAccount();    //-> is
        // CurrentAccount cc = new Account();   //-> error in conversion

        if(cc instanceof CurrentAccount)
            System.out.println("cc type is Account");
        else
            System.out.println("cc type isn't Account");
    }

Conclusion:
    01. We can't instance superclass objects in variables of subclass types.
    02. An object isn't instanceof of one class:
        only if the type of object isn't equal to the instance.